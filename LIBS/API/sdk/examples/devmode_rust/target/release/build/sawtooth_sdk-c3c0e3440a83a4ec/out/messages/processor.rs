// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TpRegisterRequest {
    // message fields
    pub family: ::std::string::String,
    pub version: ::std::string::String,
    pub namespaces: ::protobuf::RepeatedField<::std::string::String>,
    pub max_occupancy: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpRegisterRequest {
    pub fn new() -> TpRegisterRequest {
        ::std::default::Default::default()
    }

    // string family = 1;

    pub fn clear_family(&mut self) {
        self.family.clear();
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: ::std::string::String) {
        self.family = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_family(&mut self) -> &mut ::std::string::String {
        &mut self.family
    }

    // Take field
    pub fn take_family(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.family, ::std::string::String::new())
    }

    pub fn get_family(&self) -> &str {
        &self.family
    }

    // string version = 2;

    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    pub fn get_version(&self) -> &str {
        &self.version
    }

    // repeated string namespaces = 4;

    pub fn clear_namespaces(&mut self) {
        self.namespaces.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespaces(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.namespaces = v;
    }

    // Mutable pointer to the field.
    pub fn mut_namespaces(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.namespaces
    }

    // Take field
    pub fn take_namespaces(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.namespaces, ::protobuf::RepeatedField::new())
    }

    pub fn get_namespaces(&self) -> &[::std::string::String] {
        &self.namespaces
    }

    // uint32 max_occupancy = 5;

    pub fn clear_max_occupancy(&mut self) {
        self.max_occupancy = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_occupancy(&mut self, v: u32) {
        self.max_occupancy = v;
    }

    pub fn get_max_occupancy(&self) -> u32 {
        self.max_occupancy
    }
}

impl ::protobuf::Message for TpRegisterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.family)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.namespaces)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.max_occupancy = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.family.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.family);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        for value in &self.namespaces {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.max_occupancy != 0 {
            my_size += ::protobuf::rt::value_size(5, self.max_occupancy, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.family.is_empty() {
            os.write_string(1, &self.family)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        for v in &self.namespaces {
            os.write_string(4, &v)?;
        };
        if self.max_occupancy != 0 {
            os.write_uint32(5, self.max_occupancy)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpRegisterRequest {
        TpRegisterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "family",
                    |m: &TpRegisterRequest| { &m.family },
                    |m: &mut TpRegisterRequest| { &mut m.family },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &TpRegisterRequest| { &m.version },
                    |m: &mut TpRegisterRequest| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "namespaces",
                    |m: &TpRegisterRequest| { &m.namespaces },
                    |m: &mut TpRegisterRequest| { &mut m.namespaces },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "max_occupancy",
                    |m: &TpRegisterRequest| { &m.max_occupancy },
                    |m: &mut TpRegisterRequest| { &mut m.max_occupancy },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpRegisterRequest>(
                    "TpRegisterRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpRegisterRequest {
        static mut instance: ::protobuf::lazy::Lazy<TpRegisterRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpRegisterRequest,
        };
        unsafe {
            instance.get(TpRegisterRequest::new)
        }
    }
}

impl ::protobuf::Clear for TpRegisterRequest {
    fn clear(&mut self) {
        self.clear_family();
        self.clear_version();
        self.clear_namespaces();
        self.clear_max_occupancy();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpRegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpRegisterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpRegisterResponse {
    // message fields
    pub status: TpRegisterResponse_Status,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpRegisterResponse {
    pub fn new() -> TpRegisterResponse {
        ::std::default::Default::default()
    }

    // .TpRegisterResponse.Status status = 1;

    pub fn clear_status(&mut self) {
        self.status = TpRegisterResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TpRegisterResponse_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> TpRegisterResponse_Status {
        self.status
    }
}

impl ::protobuf::Message for TpRegisterResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != TpRegisterResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.status != TpRegisterResponse_Status::STATUS_UNSET {
            os.write_enum(1, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpRegisterResponse {
        TpRegisterResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TpRegisterResponse_Status>>(
                    "status",
                    |m: &TpRegisterResponse| { &m.status },
                    |m: &mut TpRegisterResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpRegisterResponse>(
                    "TpRegisterResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpRegisterResponse {
        static mut instance: ::protobuf::lazy::Lazy<TpRegisterResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpRegisterResponse,
        };
        unsafe {
            instance.get(TpRegisterResponse::new)
        }
    }
}

impl ::protobuf::Clear for TpRegisterResponse {
    fn clear(&mut self) {
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpRegisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpRegisterResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TpRegisterResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    ERROR = 2,
}

impl ::protobuf::ProtobufEnum for TpRegisterResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TpRegisterResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(TpRegisterResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(TpRegisterResponse_Status::OK),
            2 => ::std::option::Option::Some(TpRegisterResponse_Status::ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TpRegisterResponse_Status] = &[
            TpRegisterResponse_Status::STATUS_UNSET,
            TpRegisterResponse_Status::OK,
            TpRegisterResponse_Status::ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TpRegisterResponse_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TpRegisterResponse_Status {
}

impl ::std::default::Default for TpRegisterResponse_Status {
    fn default() -> Self {
        TpRegisterResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TpRegisterResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpUnregisterRequest {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpUnregisterRequest {
    pub fn new() -> TpUnregisterRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TpUnregisterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpUnregisterRequest {
        TpUnregisterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TpUnregisterRequest>(
                    "TpUnregisterRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpUnregisterRequest {
        static mut instance: ::protobuf::lazy::Lazy<TpUnregisterRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpUnregisterRequest,
        };
        unsafe {
            instance.get(TpUnregisterRequest::new)
        }
    }
}

impl ::protobuf::Clear for TpUnregisterRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpUnregisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpUnregisterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpUnregisterResponse {
    // message fields
    pub status: TpUnregisterResponse_Status,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpUnregisterResponse {
    pub fn new() -> TpUnregisterResponse {
        ::std::default::Default::default()
    }

    // .TpUnregisterResponse.Status status = 1;

    pub fn clear_status(&mut self) {
        self.status = TpUnregisterResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TpUnregisterResponse_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> TpUnregisterResponse_Status {
        self.status
    }
}

impl ::protobuf::Message for TpUnregisterResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != TpUnregisterResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.status != TpUnregisterResponse_Status::STATUS_UNSET {
            os.write_enum(1, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpUnregisterResponse {
        TpUnregisterResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TpUnregisterResponse_Status>>(
                    "status",
                    |m: &TpUnregisterResponse| { &m.status },
                    |m: &mut TpUnregisterResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpUnregisterResponse>(
                    "TpUnregisterResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpUnregisterResponse {
        static mut instance: ::protobuf::lazy::Lazy<TpUnregisterResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpUnregisterResponse,
        };
        unsafe {
            instance.get(TpUnregisterResponse::new)
        }
    }
}

impl ::protobuf::Clear for TpUnregisterResponse {
    fn clear(&mut self) {
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpUnregisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpUnregisterResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TpUnregisterResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    ERROR = 2,
}

impl ::protobuf::ProtobufEnum for TpUnregisterResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TpUnregisterResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(TpUnregisterResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(TpUnregisterResponse_Status::OK),
            2 => ::std::option::Option::Some(TpUnregisterResponse_Status::ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TpUnregisterResponse_Status] = &[
            TpUnregisterResponse_Status::STATUS_UNSET,
            TpUnregisterResponse_Status::OK,
            TpUnregisterResponse_Status::ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TpUnregisterResponse_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TpUnregisterResponse_Status {
}

impl ::std::default::Default for TpUnregisterResponse_Status {
    fn default() -> Self {
        TpUnregisterResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TpUnregisterResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpProcessRequest {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::transaction::TransactionHeader>,
    pub payload: ::std::vec::Vec<u8>,
    pub signature: ::std::string::String,
    pub context_id: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpProcessRequest {
    pub fn new() -> TpProcessRequest {
        ::std::default::Default::default()
    }

    // .TransactionHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::transaction::TransactionHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::transaction::TransactionHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::transaction::TransactionHeader {
        self.header.take().unwrap_or_else(|| super::transaction::TransactionHeader::new())
    }

    pub fn get_header(&self) -> &super::transaction::TransactionHeader {
        self.header.as_ref().unwrap_or_else(|| super::transaction::TransactionHeader::default_instance())
    }

    // bytes payload = 2;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }

    // string signature = 3;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    pub fn get_signature(&self) -> &str {
        &self.signature
    }

    // string context_id = 4;

    pub fn clear_context_id(&mut self) {
        self.context_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_id(&mut self, v: ::std::string::String) {
        self.context_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_id(&mut self) -> &mut ::std::string::String {
        &mut self.context_id
    }

    // Take field
    pub fn take_context_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_id, ::std::string::String::new())
    }

    pub fn get_context_id(&self) -> &str {
        &self.context_id
    }
}

impl ::protobuf::Message for TpProcessRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature);
        }
        if !self.context_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.context_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        if !self.signature.is_empty() {
            os.write_string(3, &self.signature)?;
        }
        if !self.context_id.is_empty() {
            os.write_string(4, &self.context_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpProcessRequest {
        TpProcessRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionHeader>>(
                    "header",
                    |m: &TpProcessRequest| { &m.header },
                    |m: &mut TpProcessRequest| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &TpProcessRequest| { &m.payload },
                    |m: &mut TpProcessRequest| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "signature",
                    |m: &TpProcessRequest| { &m.signature },
                    |m: &mut TpProcessRequest| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "context_id",
                    |m: &TpProcessRequest| { &m.context_id },
                    |m: &mut TpProcessRequest| { &mut m.context_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpProcessRequest>(
                    "TpProcessRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpProcessRequest {
        static mut instance: ::protobuf::lazy::Lazy<TpProcessRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpProcessRequest,
        };
        unsafe {
            instance.get(TpProcessRequest::new)
        }
    }
}

impl ::protobuf::Clear for TpProcessRequest {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_payload();
        self.clear_signature();
        self.clear_context_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpProcessRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpProcessRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpProcessResponse {
    // message fields
    pub status: TpProcessResponse_Status,
    pub message: ::std::string::String,
    pub extended_data: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpProcessResponse {
    pub fn new() -> TpProcessResponse {
        ::std::default::Default::default()
    }

    // .TpProcessResponse.Status status = 1;

    pub fn clear_status(&mut self) {
        self.status = TpProcessResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TpProcessResponse_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> TpProcessResponse_Status {
        self.status
    }

    // string message = 2;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    pub fn get_message(&self) -> &str {
        &self.message
    }

    // bytes extended_data = 3;

    pub fn clear_extended_data(&mut self) {
        self.extended_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_extended_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.extended_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extended_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.extended_data
    }

    // Take field
    pub fn take_extended_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.extended_data, ::std::vec::Vec::new())
    }

    pub fn get_extended_data(&self) -> &[u8] {
        &self.extended_data
    }
}

impl ::protobuf::Message for TpProcessResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.extended_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != TpProcessResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if !self.extended_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.extended_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.status != TpProcessResponse_Status::STATUS_UNSET {
            os.write_enum(1, self.status.value())?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if !self.extended_data.is_empty() {
            os.write_bytes(3, &self.extended_data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpProcessResponse {
        TpProcessResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TpProcessResponse_Status>>(
                    "status",
                    |m: &TpProcessResponse| { &m.status },
                    |m: &mut TpProcessResponse| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &TpProcessResponse| { &m.message },
                    |m: &mut TpProcessResponse| { &mut m.message },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "extended_data",
                    |m: &TpProcessResponse| { &m.extended_data },
                    |m: &mut TpProcessResponse| { &mut m.extended_data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpProcessResponse>(
                    "TpProcessResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpProcessResponse {
        static mut instance: ::protobuf::lazy::Lazy<TpProcessResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpProcessResponse,
        };
        unsafe {
            instance.get(TpProcessResponse::new)
        }
    }
}

impl ::protobuf::Clear for TpProcessResponse {
    fn clear(&mut self) {
        self.clear_status();
        self.clear_message();
        self.clear_extended_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpProcessResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpProcessResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TpProcessResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    INVALID_TRANSACTION = 2,
    INTERNAL_ERROR = 3,
}

impl ::protobuf::ProtobufEnum for TpProcessResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TpProcessResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(TpProcessResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(TpProcessResponse_Status::OK),
            2 => ::std::option::Option::Some(TpProcessResponse_Status::INVALID_TRANSACTION),
            3 => ::std::option::Option::Some(TpProcessResponse_Status::INTERNAL_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TpProcessResponse_Status] = &[
            TpProcessResponse_Status::STATUS_UNSET,
            TpProcessResponse_Status::OK,
            TpProcessResponse_Status::INVALID_TRANSACTION,
            TpProcessResponse_Status::INTERNAL_ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TpProcessResponse_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TpProcessResponse_Status {
}

impl ::std::default::Default for TpProcessResponse_Status {
    fn default() -> Self {
        TpProcessResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TpProcessResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fprocessor.proto\x1a\x11transaction.proto\"\x8a\x01\n\x11TpRegister\
    Request\x12\x16\n\x06family\x18\x01\x20\x01(\tR\x06family\x12\x18\n\x07v\
    ersion\x18\x02\x20\x01(\tR\x07version\x12\x1e\n\nnamespaces\x18\x04\x20\
    \x03(\tR\nnamespaces\x12#\n\rmax_occupancy\x18\x05\x20\x01(\rR\x0cmaxOcc\
    upancy\"w\n\x12TpRegisterResponse\x122\n\x06status\x18\x01\x20\x01(\x0e2\
    \x1a.TpRegisterResponse.StatusR\x06status\"-\n\x06Status\x12\x10\n\x0cST\
    ATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\t\n\x05ERROR\x10\x02\"\x15\
    \n\x13TpUnregisterRequest\"{\n\x14TpUnregisterResponse\x124\n\x06status\
    \x18\x01\x20\x01(\x0e2\x1c.TpUnregisterResponse.StatusR\x06status\"-\n\
    \x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\t\
    \n\x05ERROR\x10\x02\"\x95\x01\n\x10TpProcessRequest\x12*\n\x06header\x18\
    \x01\x20\x01(\x0b2\x12.TransactionHeaderR\x06header\x12\x18\n\x07payload\
    \x18\x02\x20\x01(\x0cR\x07payload\x12\x1c\n\tsignature\x18\x03\x20\x01(\
    \tR\tsignature\x12\x1d\n\ncontext_id\x18\x04\x20\x01(\tR\tcontextId\"\
    \xd6\x01\n\x11TpProcessResponse\x121\n\x06status\x18\x01\x20\x01(\x0e2\
    \x19.TpProcessResponse.StatusR\x06status\x12\x18\n\x07message\x18\x02\
    \x20\x01(\tR\x07message\x12#\n\rextended_data\x18\x03\x20\x01(\x0cR\x0ce\
    xtendedData\"O\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02\
    OK\x10\x01\x12\x17\n\x13INVALID_TRANSACTION\x10\x02\x12\x12\n\x0eINTERNA\
    L_ERROR\x10\x03B(\n\x15sawtooth.sdk.protobufP\x01Z\rprocessor_pb2b\x06pr\
    oto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
