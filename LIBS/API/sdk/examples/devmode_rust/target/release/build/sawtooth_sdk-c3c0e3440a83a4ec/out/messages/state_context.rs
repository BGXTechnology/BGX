// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TpStateEntry {
    // message fields
    pub address: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpStateEntry {
    pub fn new() -> TpStateEntry {
        ::std::default::Default::default()
    }

    // string address = 1;

    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    pub fn get_address(&self) -> &str {
        &self.address
    }

    // bytes data = 2;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
}

impl ::protobuf::Message for TpStateEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpStateEntry {
        TpStateEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &TpStateEntry| { &m.address },
                    |m: &mut TpStateEntry| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &TpStateEntry| { &m.data },
                    |m: &mut TpStateEntry| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpStateEntry>(
                    "TpStateEntry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpStateEntry {
        static mut instance: ::protobuf::lazy::Lazy<TpStateEntry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpStateEntry,
        };
        unsafe {
            instance.get(TpStateEntry::new)
        }
    }
}

impl ::protobuf::Clear for TpStateEntry {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpStateEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpStateGetRequest {
    // message fields
    pub context_id: ::std::string::String,
    pub addresses: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpStateGetRequest {
    pub fn new() -> TpStateGetRequest {
        ::std::default::Default::default()
    }

    // string context_id = 1;

    pub fn clear_context_id(&mut self) {
        self.context_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_id(&mut self, v: ::std::string::String) {
        self.context_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_id(&mut self) -> &mut ::std::string::String {
        &mut self.context_id
    }

    // Take field
    pub fn take_context_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_id, ::std::string::String::new())
    }

    pub fn get_context_id(&self) -> &str {
        &self.context_id
    }

    // repeated string addresses = 2;

    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.addresses, ::protobuf::RepeatedField::new())
    }

    pub fn get_addresses(&self) -> &[::std::string::String] {
        &self.addresses
    }
}

impl ::protobuf::Message for TpStateGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.addresses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.context_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.context_id);
        }
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.context_id.is_empty() {
            os.write_string(1, &self.context_id)?;
        }
        for v in &self.addresses {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpStateGetRequest {
        TpStateGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "context_id",
                    |m: &TpStateGetRequest| { &m.context_id },
                    |m: &mut TpStateGetRequest| { &mut m.context_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addresses",
                    |m: &TpStateGetRequest| { &m.addresses },
                    |m: &mut TpStateGetRequest| { &mut m.addresses },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpStateGetRequest>(
                    "TpStateGetRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpStateGetRequest {
        static mut instance: ::protobuf::lazy::Lazy<TpStateGetRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpStateGetRequest,
        };
        unsafe {
            instance.get(TpStateGetRequest::new)
        }
    }
}

impl ::protobuf::Clear for TpStateGetRequest {
    fn clear(&mut self) {
        self.clear_context_id();
        self.clear_addresses();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpStateGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpStateGetResponse {
    // message fields
    pub entries: ::protobuf::RepeatedField<TpStateEntry>,
    pub status: TpStateGetResponse_Status,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpStateGetResponse {
    pub fn new() -> TpStateGetResponse {
        ::std::default::Default::default()
    }

    // repeated .TpStateEntry entries = 1;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<TpStateEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<TpStateEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<TpStateEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[TpStateEntry] {
        &self.entries
    }

    // .TpStateGetResponse.Status status = 2;

    pub fn clear_status(&mut self) {
        self.status = TpStateGetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TpStateGetResponse_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> TpStateGetResponse_Status {
        self.status
    }
}

impl ::protobuf::Message for TpStateGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.status != TpStateGetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.status != TpStateGetResponse_Status::STATUS_UNSET {
            os.write_enum(2, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpStateGetResponse {
        TpStateGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TpStateEntry>>(
                    "entries",
                    |m: &TpStateGetResponse| { &m.entries },
                    |m: &mut TpStateGetResponse| { &mut m.entries },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TpStateGetResponse_Status>>(
                    "status",
                    |m: &TpStateGetResponse| { &m.status },
                    |m: &mut TpStateGetResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpStateGetResponse>(
                    "TpStateGetResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpStateGetResponse {
        static mut instance: ::protobuf::lazy::Lazy<TpStateGetResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpStateGetResponse,
        };
        unsafe {
            instance.get(TpStateGetResponse::new)
        }
    }
}

impl ::protobuf::Clear for TpStateGetResponse {
    fn clear(&mut self) {
        self.clear_entries();
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpStateGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TpStateGetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    AUTHORIZATION_ERROR = 2,
}

impl ::protobuf::ProtobufEnum for TpStateGetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TpStateGetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(TpStateGetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(TpStateGetResponse_Status::OK),
            2 => ::std::option::Option::Some(TpStateGetResponse_Status::AUTHORIZATION_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TpStateGetResponse_Status] = &[
            TpStateGetResponse_Status::STATUS_UNSET,
            TpStateGetResponse_Status::OK,
            TpStateGetResponse_Status::AUTHORIZATION_ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TpStateGetResponse_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TpStateGetResponse_Status {
}

impl ::std::default::Default for TpStateGetResponse_Status {
    fn default() -> Self {
        TpStateGetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateGetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpStateSetRequest {
    // message fields
    pub context_id: ::std::string::String,
    pub entries: ::protobuf::RepeatedField<TpStateEntry>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpStateSetRequest {
    pub fn new() -> TpStateSetRequest {
        ::std::default::Default::default()
    }

    // string context_id = 1;

    pub fn clear_context_id(&mut self) {
        self.context_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_id(&mut self, v: ::std::string::String) {
        self.context_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_id(&mut self) -> &mut ::std::string::String {
        &mut self.context_id
    }

    // Take field
    pub fn take_context_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_id, ::std::string::String::new())
    }

    pub fn get_context_id(&self) -> &str {
        &self.context_id
    }

    // repeated .TpStateEntry entries = 2;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<TpStateEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<TpStateEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<TpStateEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[TpStateEntry] {
        &self.entries
    }
}

impl ::protobuf::Message for TpStateSetRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.context_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.context_id);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.context_id.is_empty() {
            os.write_string(1, &self.context_id)?;
        }
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpStateSetRequest {
        TpStateSetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "context_id",
                    |m: &TpStateSetRequest| { &m.context_id },
                    |m: &mut TpStateSetRequest| { &mut m.context_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TpStateEntry>>(
                    "entries",
                    |m: &TpStateSetRequest| { &m.entries },
                    |m: &mut TpStateSetRequest| { &mut m.entries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpStateSetRequest>(
                    "TpStateSetRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpStateSetRequest {
        static mut instance: ::protobuf::lazy::Lazy<TpStateSetRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpStateSetRequest,
        };
        unsafe {
            instance.get(TpStateSetRequest::new)
        }
    }
}

impl ::protobuf::Clear for TpStateSetRequest {
    fn clear(&mut self) {
        self.clear_context_id();
        self.clear_entries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpStateSetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateSetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpStateSetResponse {
    // message fields
    pub addresses: ::protobuf::RepeatedField<::std::string::String>,
    pub status: TpStateSetResponse_Status,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpStateSetResponse {
    pub fn new() -> TpStateSetResponse {
        ::std::default::Default::default()
    }

    // repeated string addresses = 1;

    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.addresses, ::protobuf::RepeatedField::new())
    }

    pub fn get_addresses(&self) -> &[::std::string::String] {
        &self.addresses
    }

    // .TpStateSetResponse.Status status = 2;

    pub fn clear_status(&mut self) {
        self.status = TpStateSetResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TpStateSetResponse_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> TpStateSetResponse_Status {
        self.status
    }
}

impl ::protobuf::Message for TpStateSetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.addresses)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.status != TpStateSetResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.addresses {
            os.write_string(1, &v)?;
        };
        if self.status != TpStateSetResponse_Status::STATUS_UNSET {
            os.write_enum(2, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpStateSetResponse {
        TpStateSetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addresses",
                    |m: &TpStateSetResponse| { &m.addresses },
                    |m: &mut TpStateSetResponse| { &mut m.addresses },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TpStateSetResponse_Status>>(
                    "status",
                    |m: &TpStateSetResponse| { &m.status },
                    |m: &mut TpStateSetResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpStateSetResponse>(
                    "TpStateSetResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpStateSetResponse {
        static mut instance: ::protobuf::lazy::Lazy<TpStateSetResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpStateSetResponse,
        };
        unsafe {
            instance.get(TpStateSetResponse::new)
        }
    }
}

impl ::protobuf::Clear for TpStateSetResponse {
    fn clear(&mut self) {
        self.clear_addresses();
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpStateSetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateSetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TpStateSetResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    AUTHORIZATION_ERROR = 2,
}

impl ::protobuf::ProtobufEnum for TpStateSetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TpStateSetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(TpStateSetResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(TpStateSetResponse_Status::OK),
            2 => ::std::option::Option::Some(TpStateSetResponse_Status::AUTHORIZATION_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TpStateSetResponse_Status] = &[
            TpStateSetResponse_Status::STATUS_UNSET,
            TpStateSetResponse_Status::OK,
            TpStateSetResponse_Status::AUTHORIZATION_ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TpStateSetResponse_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TpStateSetResponse_Status {
}

impl ::std::default::Default for TpStateSetResponse_Status {
    fn default() -> Self {
        TpStateSetResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateSetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpStateDeleteRequest {
    // message fields
    pub context_id: ::std::string::String,
    pub addresses: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpStateDeleteRequest {
    pub fn new() -> TpStateDeleteRequest {
        ::std::default::Default::default()
    }

    // string context_id = 1;

    pub fn clear_context_id(&mut self) {
        self.context_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_id(&mut self, v: ::std::string::String) {
        self.context_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_id(&mut self) -> &mut ::std::string::String {
        &mut self.context_id
    }

    // Take field
    pub fn take_context_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_id, ::std::string::String::new())
    }

    pub fn get_context_id(&self) -> &str {
        &self.context_id
    }

    // repeated string addresses = 2;

    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.addresses, ::protobuf::RepeatedField::new())
    }

    pub fn get_addresses(&self) -> &[::std::string::String] {
        &self.addresses
    }
}

impl ::protobuf::Message for TpStateDeleteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.addresses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.context_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.context_id);
        }
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.context_id.is_empty() {
            os.write_string(1, &self.context_id)?;
        }
        for v in &self.addresses {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpStateDeleteRequest {
        TpStateDeleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "context_id",
                    |m: &TpStateDeleteRequest| { &m.context_id },
                    |m: &mut TpStateDeleteRequest| { &mut m.context_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addresses",
                    |m: &TpStateDeleteRequest| { &m.addresses },
                    |m: &mut TpStateDeleteRequest| { &mut m.addresses },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpStateDeleteRequest>(
                    "TpStateDeleteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpStateDeleteRequest {
        static mut instance: ::protobuf::lazy::Lazy<TpStateDeleteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpStateDeleteRequest,
        };
        unsafe {
            instance.get(TpStateDeleteRequest::new)
        }
    }
}

impl ::protobuf::Clear for TpStateDeleteRequest {
    fn clear(&mut self) {
        self.clear_context_id();
        self.clear_addresses();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpStateDeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateDeleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpStateDeleteResponse {
    // message fields
    pub addresses: ::protobuf::RepeatedField<::std::string::String>,
    pub status: TpStateDeleteResponse_Status,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpStateDeleteResponse {
    pub fn new() -> TpStateDeleteResponse {
        ::std::default::Default::default()
    }

    // repeated string addresses = 1;

    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.addresses, ::protobuf::RepeatedField::new())
    }

    pub fn get_addresses(&self) -> &[::std::string::String] {
        &self.addresses
    }

    // .TpStateDeleteResponse.Status status = 2;

    pub fn clear_status(&mut self) {
        self.status = TpStateDeleteResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TpStateDeleteResponse_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> TpStateDeleteResponse_Status {
        self.status
    }
}

impl ::protobuf::Message for TpStateDeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.addresses)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.status != TpStateDeleteResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.addresses {
            os.write_string(1, &v)?;
        };
        if self.status != TpStateDeleteResponse_Status::STATUS_UNSET {
            os.write_enum(2, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpStateDeleteResponse {
        TpStateDeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addresses",
                    |m: &TpStateDeleteResponse| { &m.addresses },
                    |m: &mut TpStateDeleteResponse| { &mut m.addresses },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TpStateDeleteResponse_Status>>(
                    "status",
                    |m: &TpStateDeleteResponse| { &m.status },
                    |m: &mut TpStateDeleteResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpStateDeleteResponse>(
                    "TpStateDeleteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpStateDeleteResponse {
        static mut instance: ::protobuf::lazy::Lazy<TpStateDeleteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpStateDeleteResponse,
        };
        unsafe {
            instance.get(TpStateDeleteResponse::new)
        }
    }
}

impl ::protobuf::Clear for TpStateDeleteResponse {
    fn clear(&mut self) {
        self.clear_addresses();
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpStateDeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateDeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TpStateDeleteResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    AUTHORIZATION_ERROR = 2,
}

impl ::protobuf::ProtobufEnum for TpStateDeleteResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TpStateDeleteResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(TpStateDeleteResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(TpStateDeleteResponse_Status::OK),
            2 => ::std::option::Option::Some(TpStateDeleteResponse_Status::AUTHORIZATION_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TpStateDeleteResponse_Status] = &[
            TpStateDeleteResponse_Status::STATUS_UNSET,
            TpStateDeleteResponse_Status::OK,
            TpStateDeleteResponse_Status::AUTHORIZATION_ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TpStateDeleteResponse_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TpStateDeleteResponse_Status {
}

impl ::std::default::Default for TpStateDeleteResponse_Status {
    fn default() -> Self {
        TpStateDeleteResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TpStateDeleteResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpReceiptAddDataRequest {
    // message fields
    pub context_id: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpReceiptAddDataRequest {
    pub fn new() -> TpReceiptAddDataRequest {
        ::std::default::Default::default()
    }

    // string context_id = 1;

    pub fn clear_context_id(&mut self) {
        self.context_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_id(&mut self, v: ::std::string::String) {
        self.context_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_id(&mut self) -> &mut ::std::string::String {
        &mut self.context_id
    }

    // Take field
    pub fn take_context_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_id, ::std::string::String::new())
    }

    pub fn get_context_id(&self) -> &str {
        &self.context_id
    }

    // bytes data = 3;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
}

impl ::protobuf::Message for TpReceiptAddDataRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.context_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.context_id);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.context_id.is_empty() {
            os.write_string(1, &self.context_id)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpReceiptAddDataRequest {
        TpReceiptAddDataRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "context_id",
                    |m: &TpReceiptAddDataRequest| { &m.context_id },
                    |m: &mut TpReceiptAddDataRequest| { &mut m.context_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &TpReceiptAddDataRequest| { &m.data },
                    |m: &mut TpReceiptAddDataRequest| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpReceiptAddDataRequest>(
                    "TpReceiptAddDataRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpReceiptAddDataRequest {
        static mut instance: ::protobuf::lazy::Lazy<TpReceiptAddDataRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpReceiptAddDataRequest,
        };
        unsafe {
            instance.get(TpReceiptAddDataRequest::new)
        }
    }
}

impl ::protobuf::Clear for TpReceiptAddDataRequest {
    fn clear(&mut self) {
        self.clear_context_id();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpReceiptAddDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpReceiptAddDataRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpReceiptAddDataResponse {
    // message fields
    pub status: TpReceiptAddDataResponse_Status,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpReceiptAddDataResponse {
    pub fn new() -> TpReceiptAddDataResponse {
        ::std::default::Default::default()
    }

    // .TpReceiptAddDataResponse.Status status = 2;

    pub fn clear_status(&mut self) {
        self.status = TpReceiptAddDataResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TpReceiptAddDataResponse_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> TpReceiptAddDataResponse_Status {
        self.status
    }
}

impl ::protobuf::Message for TpReceiptAddDataResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != TpReceiptAddDataResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.status != TpReceiptAddDataResponse_Status::STATUS_UNSET {
            os.write_enum(2, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpReceiptAddDataResponse {
        TpReceiptAddDataResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TpReceiptAddDataResponse_Status>>(
                    "status",
                    |m: &TpReceiptAddDataResponse| { &m.status },
                    |m: &mut TpReceiptAddDataResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpReceiptAddDataResponse>(
                    "TpReceiptAddDataResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpReceiptAddDataResponse {
        static mut instance: ::protobuf::lazy::Lazy<TpReceiptAddDataResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpReceiptAddDataResponse,
        };
        unsafe {
            instance.get(TpReceiptAddDataResponse::new)
        }
    }
}

impl ::protobuf::Clear for TpReceiptAddDataResponse {
    fn clear(&mut self) {
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpReceiptAddDataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpReceiptAddDataResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TpReceiptAddDataResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    ERROR = 2,
}

impl ::protobuf::ProtobufEnum for TpReceiptAddDataResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TpReceiptAddDataResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(TpReceiptAddDataResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(TpReceiptAddDataResponse_Status::OK),
            2 => ::std::option::Option::Some(TpReceiptAddDataResponse_Status::ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TpReceiptAddDataResponse_Status] = &[
            TpReceiptAddDataResponse_Status::STATUS_UNSET,
            TpReceiptAddDataResponse_Status::OK,
            TpReceiptAddDataResponse_Status::ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TpReceiptAddDataResponse_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TpReceiptAddDataResponse_Status {
}

impl ::std::default::Default for TpReceiptAddDataResponse_Status {
    fn default() -> Self {
        TpReceiptAddDataResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TpReceiptAddDataResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpEventAddRequest {
    // message fields
    pub context_id: ::std::string::String,
    pub event: ::protobuf::SingularPtrField<super::events::Event>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpEventAddRequest {
    pub fn new() -> TpEventAddRequest {
        ::std::default::Default::default()
    }

    // string context_id = 1;

    pub fn clear_context_id(&mut self) {
        self.context_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_id(&mut self, v: ::std::string::String) {
        self.context_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_id(&mut self) -> &mut ::std::string::String {
        &mut self.context_id
    }

    // Take field
    pub fn take_context_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_id, ::std::string::String::new())
    }

    pub fn get_context_id(&self) -> &str {
        &self.context_id
    }

    // .Event event = 2;

    pub fn clear_event(&mut self) {
        self.event.clear();
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: super::events::Event) {
        self.event = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event(&mut self) -> &mut super::events::Event {
        if self.event.is_none() {
            self.event.set_default();
        }
        self.event.as_mut().unwrap()
    }

    // Take field
    pub fn take_event(&mut self) -> super::events::Event {
        self.event.take().unwrap_or_else(|| super::events::Event::new())
    }

    pub fn get_event(&self) -> &super::events::Event {
        self.event.as_ref().unwrap_or_else(|| super::events::Event::default_instance())
    }
}

impl ::protobuf::Message for TpEventAddRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.event {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.event)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.context_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.context_id);
        }
        if let Some(ref v) = self.event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.context_id.is_empty() {
            os.write_string(1, &self.context_id)?;
        }
        if let Some(ref v) = self.event.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpEventAddRequest {
        TpEventAddRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "context_id",
                    |m: &TpEventAddRequest| { &m.context_id },
                    |m: &mut TpEventAddRequest| { &mut m.context_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::events::Event>>(
                    "event",
                    |m: &TpEventAddRequest| { &m.event },
                    |m: &mut TpEventAddRequest| { &mut m.event },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpEventAddRequest>(
                    "TpEventAddRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpEventAddRequest {
        static mut instance: ::protobuf::lazy::Lazy<TpEventAddRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpEventAddRequest,
        };
        unsafe {
            instance.get(TpEventAddRequest::new)
        }
    }
}

impl ::protobuf::Clear for TpEventAddRequest {
    fn clear(&mut self) {
        self.clear_context_id();
        self.clear_event();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpEventAddRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpEventAddRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TpEventAddResponse {
    // message fields
    pub status: TpEventAddResponse_Status,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TpEventAddResponse {
    pub fn new() -> TpEventAddResponse {
        ::std::default::Default::default()
    }

    // .TpEventAddResponse.Status status = 2;

    pub fn clear_status(&mut self) {
        self.status = TpEventAddResponse_Status::STATUS_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TpEventAddResponse_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> TpEventAddResponse_Status {
        self.status
    }
}

impl ::protobuf::Message for TpEventAddResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != TpEventAddResponse_Status::STATUS_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.status != TpEventAddResponse_Status::STATUS_UNSET {
            os.write_enum(2, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TpEventAddResponse {
        TpEventAddResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TpEventAddResponse_Status>>(
                    "status",
                    |m: &TpEventAddResponse| { &m.status },
                    |m: &mut TpEventAddResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TpEventAddResponse>(
                    "TpEventAddResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TpEventAddResponse {
        static mut instance: ::protobuf::lazy::Lazy<TpEventAddResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TpEventAddResponse,
        };
        unsafe {
            instance.get(TpEventAddResponse::new)
        }
    }
}

impl ::protobuf::Clear for TpEventAddResponse {
    fn clear(&mut self) {
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TpEventAddResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TpEventAddResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TpEventAddResponse_Status {
    STATUS_UNSET = 0,
    OK = 1,
    ERROR = 2,
}

impl ::protobuf::ProtobufEnum for TpEventAddResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TpEventAddResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(TpEventAddResponse_Status::STATUS_UNSET),
            1 => ::std::option::Option::Some(TpEventAddResponse_Status::OK),
            2 => ::std::option::Option::Some(TpEventAddResponse_Status::ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TpEventAddResponse_Status] = &[
            TpEventAddResponse_Status::STATUS_UNSET,
            TpEventAddResponse_Status::OK,
            TpEventAddResponse_Status::ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TpEventAddResponse_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TpEventAddResponse_Status {
}

impl ::std::default::Default for TpEventAddResponse_Status {
    fn default() -> Self {
        TpEventAddResponse_Status::STATUS_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TpEventAddResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13state_context.proto\x1a\x0cevents.proto\"<\n\x0cTpStateEntry\x12\
    \x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12\x12\n\x04data\x18\
    \x02\x20\x01(\x0cR\x04data\"P\n\x11TpStateGetRequest\x12\x1d\n\ncontext_\
    id\x18\x01\x20\x01(\tR\tcontextId\x12\x1c\n\taddresses\x18\x02\x20\x03(\
    \tR\taddresses\"\xae\x01\n\x12TpStateGetResponse\x12'\n\x07entries\x18\
    \x01\x20\x03(\x0b2\r.TpStateEntryR\x07entries\x122\n\x06status\x18\x02\
    \x20\x01(\x0e2\x1a.TpStateGetResponse.StatusR\x06status\";\n\x06Status\
    \x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x17\n\x13AU\
    THORIZATION_ERROR\x10\x02\"[\n\x11TpStateSetRequest\x12\x1d\n\ncontext_i\
    d\x18\x01\x20\x01(\tR\tcontextId\x12'\n\x07entries\x18\x02\x20\x03(\x0b2\
    \r.TpStateEntryR\x07entries\"\xa3\x01\n\x12TpStateSetResponse\x12\x1c\n\
    \taddresses\x18\x01\x20\x03(\tR\taddresses\x122\n\x06status\x18\x02\x20\
    \x01(\x0e2\x1a.TpStateSetResponse.StatusR\x06status\";\n\x06Status\x12\
    \x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x17\n\x13AUTHOR\
    IZATION_ERROR\x10\x02\"S\n\x14TpStateDeleteRequest\x12\x1d\n\ncontext_id\
    \x18\x01\x20\x01(\tR\tcontextId\x12\x1c\n\taddresses\x18\x02\x20\x03(\tR\
    \taddresses\"\xa9\x01\n\x15TpStateDeleteResponse\x12\x1c\n\taddresses\
    \x18\x01\x20\x03(\tR\taddresses\x125\n\x06status\x18\x02\x20\x01(\x0e2\
    \x1d.TpStateDeleteResponse.StatusR\x06status\";\n\x06Status\x12\x10\n\
    \x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\x17\n\x13AUTHORIZATIO\
    N_ERROR\x10\x02\"L\n\x17TpReceiptAddDataRequest\x12\x1d\n\ncontext_id\
    \x18\x01\x20\x01(\tR\tcontextId\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\
    \x04data\"\x83\x01\n\x18TpReceiptAddDataResponse\x128\n\x06status\x18\
    \x02\x20\x01(\x0e2\x20.TpReceiptAddDataResponse.StatusR\x06status\"-\n\
    \x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\t\
    \n\x05ERROR\x10\x02\"P\n\x11TpEventAddRequest\x12\x1d\n\ncontext_id\x18\
    \x01\x20\x01(\tR\tcontextId\x12\x1c\n\x05event\x18\x02\x20\x01(\x0b2\x06\
    .EventR\x05event\"w\n\x12TpEventAddResponse\x122\n\x06status\x18\x02\x20\
    \x01(\x0e2\x1a.TpEventAddResponse.StatusR\x06status\"-\n\x06Status\x12\
    \x10\n\x0cSTATUS_UNSET\x10\0\x12\x06\n\x02OK\x10\x01\x12\t\n\x05ERROR\
    \x10\x02B,\n\x15sawtooth.sdk.protobufP\x01Z\x11state_context_pb2b\x06pro\
    to3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
